#class XBuildModuleInfo
package XBuildModuleInfo;
use strict;

#constructor
sub new {
  my ($class) = @_;
  my $self =
    {
     _exename           => undef,
     _libname           => undef,
     _code_type         => undef,
     _code_body         => [],
    };

  bless $self, $class;
  return $self;
}

our ($_exename, $_libname, $_code_type, @_code_body);

sub append_code_body {
  my ($self, $code) = @_;
  push(@_code_body, $code) if defined($code);
}

sub set_exename {
  my ($self, $name) = @_;
  $self->{_exename} = $name if defined($name);
}

sub set_libname {
  my ($self, $name) = @_;
  $self->{_libname} = $name if defined($name);
}

sub set_codetype {
  my ($self, $type) = @_;
  $self->{_code_type} = $type if defined($type);
}

my $time_stamp = localtime();
my $makefile_head .= <<___;
################################################################
# This file is auto generated by XBuild tools
# You can modify it manually for customization.
#
# $time_stamp
################################################################

___

sub gen_android_makefile {
  my ($self) = @_;
  open(OutFile, ">Android.mk") || die("Cannot open Android.mk\n");
  print OutFile $makefile_head;
  print OutFile "LOCAL_MODULE := " . $self->{_local_module} . "\n";
  print OutFile "LOCAL_SRC_FILES := " . $self->{_local_src_files} . "\n";

#  print OutFile "body := " . $self->{_local_code_body} . "\n";
  # print OutFile "body := " . $_local_code_body . "\n";

  foreach (@_local_code_body) {
    print OutFile $_;
  }

  printf OutFile "\ninclude \$(%s)\n", $self->{_local_build_type};
  close OutFile;
}

sub print {
  my ($self) = @_;
  printf( "%s \n\n", $self->dump_info);
}

  1;
