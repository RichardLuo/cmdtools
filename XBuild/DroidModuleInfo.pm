#class DroidModuleInfo
package DroidModuleInfo;
use strict;

#constructor
sub new {
  my ($class) = @_;
  my $self =
    {
     _local_module             => undef,
     _local_src_files          => undef,
     _local_cflags             => undef,
     _local_c_includes         => undef,
     _local_module_tags        => undef,
     _local_prelink_module     => undef,
     _local_shared_libraries   => undef,
     _local_build_type         => undef,
     _local_code_body          => [],
    };

  bless $self, $class;
  return $self;
}

# use Alias qw(attr);
our (@_local_code_body);



sub append_code_body {
  my ($self, $code) = @_;
  # $self->{_local_code_body} .= $code if defined($code);
  push(@_local_code_body, $code) if defined($code);
}

sub set_local_module {
  my ($self, $name) = @_;
  $self->{_local_module} = $name if defined($name);
  return ( $self->{_local_module} );
}

sub append_local_src_file {
  my ($self, $file) = @_;
  $self->{_local_src_files} .= " $file" if defined($file);
  return ( $self->{_local_src_files} );
}

sub set_build_type {
  my ($self, $type) = @_;
  $self->{_local_build_type} .= " $type" if defined($type);
}

sub dump_info {
  my ($self) = @_;
  return
    "_local_module:\t[$self->{_local_module}]\n" .
      "_local_src_files:\t[$self->{_local_src_files}]\n";
}

my $time_stamp = localtime();
my $droid_mk_head .= <<___;
################################################################
# This file is auto generated by XBuild tools
# You can modify it manually for customization.
#
# $time_stamp
################################################################

LOCAL_PATH:= \$(call my-dir)
include \$(CLEAR_VARS)

___

sub gen_android_makefile {
  my ($self) = @_;
  open(OutFile, ">Android.mk") || die("Cannot open Android.mk\n");
  print OutFile $droid_mk_head;
  print OutFile "LOCAL_MODULE := " . $self->{_local_module} . "\n";
  print OutFile "LOCAL_SRC_FILES := " . $self->{_local_src_files} . "\n";

#  print OutFile "body := " . $self->{_local_code_body} . "\n";
  # print OutFile "body := " . $_local_code_body . "\n";

  foreach (@_local_code_body) {
    print OutFile $_;
  }

  printf OutFile "\ninclude \$(%s)\n", $self->{_local_build_type};
  close OutFile;
}

sub print {
  my ($self) = @_;
  printf( "%s \n\n", $self->dump_info);
}

  1;
